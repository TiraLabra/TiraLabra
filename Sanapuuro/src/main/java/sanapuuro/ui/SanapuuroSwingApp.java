/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sanapuuro.ui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.List;
import java.util.Random;
import java.util.Set;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import sanapuuro.AiController;
import sanapuuro.Grid;
import sanapuuro.GridListener;
import sanapuuro.Player;
import sanapuuro.WordEvaluator;
import sanapuuro.datastructures.MyHashSet;
import sanapuuro.fileio.FileIO;
import sanapuuro.hashfunctions.DJB2ForStrings;
import sanapuuro.letters.GameLetters;
import sanapuuro.letters.LetterContainer;
import sanapuuro.letters.LetterPool;
import sanapuuro.letters.Letters;
import sanapuuro.letters.PlayerLetterPool;
import sanapuuro.utils.Util;

/**
 *
 * @author skaipio
 */
public class SanapuuroSwingApp extends javax.swing.JFrame {

    private final PlayerPanel playerOneLetterPoolPanel, playerTwoLetterPoolPanel;
    private final GridCells gridCells = new GridCells();
    private final Grid grid;
    private final Player humanPlayer;
    private final Player aiPlayer;
    private final AiController ai;
    private final LetterPool aiLetterPool;
    private final WordEvaluator evaluator;
    private int successiveSkips;

    /**
     * Creates new form SanapuuroSwingApp
     *
     * @param words
     * @param letters
     */
    public SanapuuroSwingApp(Set<String> words, Letters letters) {
        this.grid = new Grid(8, 8);
        this.evaluator = new WordEvaluator(words);

        LetterPool humanLetterPool = new PlayerLetterPool(letters);
        this.humanPlayer = new Player(humanLetterPool, grid, "Hessu");
        this.aiLetterPool = new PlayerLetterPool(letters);
        this.aiPlayer = new Player(aiLetterPool, grid, "Mikki");

        this.playerOneLetterPoolPanel = new PlayerPanel(humanPlayer);
        this.playerTwoLetterPoolPanel = new PlayerPanel(aiPlayer);

        this.ai = new AiController(aiLetterPool, grid, "Mikki", words);
        ai.setControlled(aiPlayer);

        initComponents();
        this.grid.addListener(gridCells);
        this.addKeyListener(gridCells);

        this.playerOneLetterPoolPanel.refresh();
        this.playerTwoLetterPoolPanel.refresh();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        letterCellPanel = new javax.swing.JPanel();
        this.letterCellPanel = this.gridCells;
        submitBtn = new javax.swing.JButton();
        playerLetters = this.playerOneLetterPoolPanel;
        aiLetters = this.playerTwoLetterPoolPanel;
        statusLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(letterCellPanel, gridBagConstraints);

        submitBtn.setText("Submit");
        submitBtn.setFocusable(false);
        submitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        getContentPane().add(submitBtn, gridBagConstraints);

        playerLetters.setMinimumSize(playerLetters.getPreferredSize());
        playerLetters.setLayout(new javax.swing.BoxLayout(playerLetters, javax.swing.BoxLayout.PAGE_AXIS));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(playerLetters, gridBagConstraints);

        aiLetters.setLayout(new javax.swing.BoxLayout(aiLetters, javax.swing.BoxLayout.PAGE_AXIS));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(aiLetters, gridBagConstraints);

        statusLabel.setText("Choose a cell to start your submission at.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        getContentPane().add(statusLabel, gridBagConstraints);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void submitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBtnActionPerformed
        this.gridCells.typingLetters = false;
        this.checkSubmission(this.humanPlayer);
        this.ai.makeMove();
        this.checkSubmission(this.aiPlayer);
        this.playerOneLetterPoolPanel.refresh();
        this.playerTwoLetterPoolPanel.refresh();
        this.gridCells.refresh();
    }//GEN-LAST:event_submitBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SanapuuroSwingApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SanapuuroSwingApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SanapuuroSwingApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SanapuuroSwingApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FileIO fileIO = new FileIO();
                Random rnd = new Random();

                List<String> words = fileIO.readInWordsFromFile("words/english_words", 8);
                MyHashSet<String> wordSet = sanapuuro.utils.Util.convertListToMyHashSet(words, new DJB2ForStrings());
                GameLetters letters = new GameLetters(rnd, fileIO.readInLettersFromFile("letters/english_letters"));

                SanapuuroSwingApp app = new SanapuuroSwingApp(wordSet, letters);
                app.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JPanel aiLetters;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JPanel letterCellPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel playerLetters;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton submitBtn;
    // End of variables declaration//GEN-END:variables

    private void checkSubmission(Player player) {
        List<LetterContainer> submission = player.getSubmission();
        String submissionStr = Util.stringFromLetterContainers(submission);
        if (!submission.isEmpty()) {
            WordEvaluator.EvaluationResult result = this.evaluator.evalute(submission);
            String status = "";
            if (result.succeeded) {
                status = player.getName() + " submitted "
                        + submissionStr.toUpperCase() + " and was awarded "
                        + result.getScore() + " points";
                statusLabel.setText(status);
                player.successfulSubmission(result.getScore());
            } else {
                status = player.getName() + " submitted "
                        + submissionStr + " but it is not a valid word";
                statusLabel.setText(status);
                player.unsuccessfulSubmission();
            }
            System.out.println(status);
            successiveSkips = 0;
        } else {
            successiveSkips++;
        }

//        if (this.grid.isFull() || successiveSkips == 2) {
//
//        }
    }

    private class PlayerPanel extends JPanel {

        private final Player player;
        private final JLabel letters = new JLabel("Letters: ");
        private final JLabel score = new JLabel("Score: ");

        private PlayerPanel(Player player) {
            this.player = player;
            Font font = new Font("", Font.PLAIN, 17);
            JLabel nameLbl = new JLabel(player.getName());
            nameLbl.setFont(font);
            //font = new Font("", Font.PLAIN, 15);
            letters.setFont(font);
            score.setFont(font);
            this.add(nameLbl);
            this.add(this.letters);
            this.add(this.score);
        }

        private void refresh() {
            String letterStr = "Letters: ";
            LetterPool pool = this.player.getLetterPool();
            for (int i = 0; i < pool.getLetters().length; i++) {
                if (pool.letterAtIndexIsFree(i)) {
                    LetterContainer container = pool.getLetters()[i];
                    letterStr += container.letter.toString();
                } else {
                    letterStr += "_";
                }
            }
            this.letters.setText(letterStr);
            this.score.setText("Score: " + this.player.getScore());
        }
    }

    private class GridCells extends JPanel implements GridListener, ActionListener, KeyListener {

        private final GridButton[][] buttons = new GridButton[8][8];
        private final Color btnDefaultColour = Color.LIGHT_GRAY;
        private final Color btnCursorColour = new Color(180, 220, 240);
        private final Color btnSelected = new Color(0, 200, 255);
        private boolean choosingDirection = false;
        public boolean typingLetters = false;
        private int startX, startY;
        private int deltaX, deltaY;
        private int cursorX, cursorY;
        private boolean keyPressed = false;

        public GridCells() {
            this.setLayout(new GridBagLayout());
            //this.setPreferredSize(new Dimension(100, 100));
            GridBagConstraints c = new GridBagConstraints();
            c.anchor = GridBagConstraints.CENTER;
            c.fill = GridBagConstraints.BOTH;
            c.weightx = 1.0;
            c.weighty = 1.0;
            Font font = new Font("", Font.PLAIN, 20);

            for (int y = 0; y < 8; y++) {
                for (int x = 0; x < 8; x++) {
                    c.gridx = x;
                    c.gridy = y;
                    GridButton btn = new GridButton(x, y);
                    btn.addActionListener(this);
                    btn.setFont(font);
                    btn.setPreferredSize(new Dimension(50, 50));
                    btn.setSize(btn.getPreferredSize());
                    btn.setMinimumSize(btn.getPreferredSize());
                    btn.setFocusable(false);
                    btn.setBackground(btnDefaultColour);
                    buttons[y][x] = btn;

                    this.add(btn, c);
                }
            }
        }

        public void refresh() {
            for (int y = 0; y < 8; y++) {
                for (int x = 0; x < 8; x++) {
                    GridButton btn = this.getButtonAt(x, y);
                    if (grid.hasContainerAt(x, y)) {
                        btn.setText(grid.getContainerAt(x, y).letter.toString());
                    } else {
                        btn.setText("");
                    }
                    btn.setBackground(btnDefaultColour);
                }
            }
        }

        @Override
        public void containerSetToGrid(LetterContainer container, int x, int y) {
            JButton btn = this.getButtonAt(x, y);
            btn.setText(container.letter.toString());
        }

        private GridButton getButtonAt(int x, int y) {
            return this.buttons[y][x];
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            if (typingLetters) {
                return;
            }
            GridButton btn = (GridButton) e.getSource();
            if (!this.choosingDirection) {
                this.choosingDirection = true;
                this.deltaX = 0;
                this.deltaY = 0;
                this.startX = btn.x;
                this.startY = btn.y;
                this.setColorsAround(startX, startY, Color.YELLOW);
                statusLabel.setText("Choose the direction of your submission.");
            } else {
                this.deltaX = btn.x - startX;
                this.deltaY = btn.y - startY;
                this.directionChosen();
            }
        }

        private void directionChosen() {
            this.choosingDirection = false;
            this.typingLetters = true;
            this.cursorX = startX;
            this.cursorY = startY;
            this.getButtonAt(startX, startY).setBackground(btnCursorColour);
            this.setColorsAround(startX, startY, btnDefaultColour);
            statusLabel.setText("Type in the letters of your submission");
        }

        private void setColorsAround(int x, int y, Color color) {
            if (x - 1 >= 0) {
                this.getButtonAt(x - 1, y).setBackground(color);
            }
            if (x + 1 < grid.width) {
                this.getButtonAt(x + 1, y).setBackground(color);
            }
            if (y - 1 >= 0) {
                this.getButtonAt(x, y - 1).setBackground(color);
            }
            if (y + 1 < grid.height) {
                this.getButtonAt(x, y + 1).setBackground(color);
            }
        }

        @Override
        public void keyTyped(KeyEvent e) {
            if (this.choosingDirection) {
                switch (e.getKeyChar()) {
                    case 'a':
                        this.deltaX = -1;
                        break;
                    case 'w':
                        this.deltaY = -1;
                        break;
                    case 's':
                        this.deltaY = 1;
                        break;
                    default:
                        this.deltaX = 1;
                }
                this.directionChosen();
            } else if (this.typingLetters && grid.isWithinGrid(cursorX, cursorY)
                    && e.getKeyChar() != '\n') {
                GridButton btn = this.getButtonAt(cursorX, cursorY);
                if (humanPlayer.letterAdded(e.getKeyChar(), btn.x, btn.y) || (e.getKeyChar() == ' ' && humanPlayer.letterSelected(cursorX, cursorY))) {
                    btn.setBackground(btnSelected);
                    cursorX += deltaX;
                    cursorY += deltaY;
                    if (grid.isWithinGrid(cursorX, cursorY)) {
                        this.getButtonAt(cursorX, cursorY).setBackground(btnCursorColour);
                    }
                    playerOneLetterPoolPanel.refresh();
                }
            } else if (e.getKeyChar() == '\n') {
                submitBtn.doClick();
            }
        }

        @Override
        public void keyPressed(KeyEvent e) {
            if (keyPressed) {
                return;
            }
            if (this.typingLetters && (e.getKeyCode() == KeyEvent.VK_BACK_SPACE || e.getKeyCode() == 8)) {
                LetterContainer removed = humanPlayer.removeLastSelection();
                if (removed != null) {
                    if (grid.isWithinGrid(cursorX, cursorY)) {
                        this.getButtonAt(cursorX, cursorY).setBackground(btnDefaultColour);
                        this.getButtonAt(cursorX, cursorY).repaint();
                    }
                    cursorX -= deltaX;
                    cursorY -= deltaY;
                    GridButton btn = this.getButtonAt(cursorX, cursorY);
                    if (this.cursorX == startX && this.cursorY == startY) {
                        this.typingLetters = false;
                        btn.setBackground(btnDefaultColour);
                    } else {
                        btn.setBackground(btnCursorColour);
                    }
                    if (!removed.isPermanent()) {
                        btn.setText("");
                    }
                    playerOneLetterPoolPanel.refresh();
                }
            }
            keyPressed = true;
        }

        @Override
        public void keyReleased(KeyEvent e) {
            keyPressed = false;
        }
    }

    private class GridButton extends JButton {

        public final int x, y;

        public GridButton(int x, int y) {
            super("");
            this.x = x;
            this.y = y;
        }
    }
}
