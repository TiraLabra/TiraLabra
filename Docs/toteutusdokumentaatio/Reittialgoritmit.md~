Reittialgoritmien toteutus

Simulaatio-luokka sisältää tiedon "maailmasta" joka on erityyppisiä ruutuja sisältävä 2-uloitteinen taulukko. Ruutuja on eri tyyppisiä ja niillä on (ja niille voidaan asettaa) erilaiset liikkumiskustannukset. Seinän lävitse ei voi liikkua lainkaan.

Algoritmi on abstrakti luokka, joka toimii pohjatoteutuksena kaikille tässä harjoitustyössä toteutetuille reittialgoritmeille. Algoritmille annetaan luomisvaiheessa tieto ylempänä selitetystä "maailma"-ruudukosta, alku- ja maalipisteen koordinaatit, tieto siitä monenko millisekunnin hidaste suoritukseen mahdollisesti halutaan, ja tieto siitä onko vinottain liikkuminen sallittua. Algoritmi toteuttaa runnable-rajapinnan eli se voidaan asettaa suoritukseen omaan säikeeseensä, kuten simulaatio-luokassa tehdään. Algoritmilta voidaan kysyä onko se valmis (tai sille voidaan antaa erityisen Paivitettava-rajapinnan toteuttava luokka jonka paivita()-metodia kutsutaan reitin löydyttyä), jonka jälkeen algoritmilta voidaan kysyä valmista reittiä. Reitti palautetaan linkitettynä listana "solmuja" maalisolmusta alkusolmuun. Algoritmi pitää myös suorituksen aikana yllä "RuudunTila"-enumeista koostuvaa maailmaruudukon kokoista ruudukkoa, jota tutkimalla saadaan selville mitä ruutua algoritmi on milläkin hetkellä tutkimassa, missä se on jo käynyt, ja mitkä on merkitty tutkittaviksi. Tästä on suuresti apua algoritmin toiminnan visualisoimisessa.

Käyttäjän asettamasta asetuksesta on kiinni, voiko reitti kulkea vinottain vai pelkästään kohtisuoria suuntia pitkin. Vinottain kulkemisen kustannus on periaatteessa sama kuin kohtisuoran suunnan kulkemisen kustannus, eli käytännössä tosielämän ajattelumaailmasta poiketen kulkeminen vinottain vastoin Pythagoraan oppeja ole työläämpää kuin vaakasuoraan kulkeminen. Tämä saattaa johtaa omituiselta näyttäviin (mutta täysin oikein toimiviin) tilanteisiin, joissa algoritmi löytää lyhimmän mahdollisen reitin, joka kuitenkin näyttää ikään kuin tekevän omituisen "koukkauksen" johonkin suuntaan. 

Tässä harjoitustyössä toteutettiin reittialgoritmit Leveyssuuntainen haku (BreadthFirstAlgoritmi), Dijkstran algoritmi (DijkstraAlgoritmi), Ahne "paras ensin" -algoritmi (GreedyBestFirstAlgoritmi) ja A*-haku (AStarAlgotitmi). Niiden toteutukset muistuttavat jonkun verran toisiaan mutta niiden toiminnallisuus on kirjoitettu mahdollisimman selkeästi ja koodi on kommentoitua. Algoritmien yksityiskohtaista toteutusta käsitellään tiedostoissa jotka ovat saman nimisiä kuin ko. algoritmit.
