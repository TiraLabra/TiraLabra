Testaustilanne 14.4.2014

JUnit-testejä on toteutettu ainakin muutamia lähes kaikille luokille.

Perceptron-luokkaa testataan loogisilla operaatioilla AND, OR ja NOT. Lisäksi hyödynnän satunnaisgeneroitua, 500 positiivista lukua ja 500 negatiivista lukua sisältävää opetusdataa (luvut pyritään siis jakamaan positiivisiin ja negatiivisiin), testaan opetuksen toimintaa 100:lla satunnaisesti valitulla luvulla. Ongelmaksi muodostuvat todennäköisyydet; välillä 1000 opetusdatan pistettä ovat sellaiset, että päätösrajapinta ei kulje tarpeeksi lähellä lukua nolla, jolloin 100 testauspisteen joukossa voi olla luku joka luokitellaan väärin. Todennäköisyyttä voidaan pienentää joko lisäämällä opetusdatan määrää esimerkiksi 2000 lukuun, koettamalla kaventaa opetusdatan pistejoukkojen välistä etäisyyttä, tai hylkäämällä osa testipisteistä (jotka liian lähellä nollaa). Tällä hetkellä testit käyttävät viimeistä tapaa.

MultiClassPerceptron luokkaa testataan hyvin samalla tavoin kuin Perceptron luokkaa. Tällä kertaa opetusdatan pisteet ovat tason R^2 pisteitä, ja ne koetetaan jakaa neljään ryhmään koordinaattiakselien jakamana. Tällä hetkellä pisteitä on yhteensä 1000, jokaisessa ryhmässä 250. Ongelmaksi muodostuu jälleen päätösrajapintojen kaltevuus. Jälleen JUnit testissä hylkään testipisteet jotka ovat liian lähellä koordinaattiakseleita, jotta vältettäisiin edes osa algoritmin normaalista toiminnasta johtuvista testien läpäisemättömyyksistä.

MLP: Tätä kokonaisuutta on hankala testata osittain satunnaisuuden takia. Tällä hetkellä MLP toteutukseni tekee suuria virheitä helpoinpienkin ongelmien ratkaisussa, ja tuntuu jäävän jumiin virhefunktion lokaaleihin minimikohtiin. Joko toteutuksessani on vakava virhe tai algoritmin toimintaa tulee parantaa pienillä hienosäädöillä. Olen tehnyt algoritmista pari hiukan erilaista variaatiota, joista molemmat tuntuvat tekevän turhan suuria virheitä. Olen tehnyt JUnit testejä niille metodeille, joille olen katsonut sen mahdolliseksi, valitettavasti testit ovat tällä hetkellä hiukan alkeellisia.
