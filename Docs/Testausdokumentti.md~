Projektia on testattu sekä käsin että JUnit-testeillä. 

JUnit-testejä on laadittu sekä tietorakenteille että algoritmille.

Reittialgoritmia testataan annetuilla ruudukoilla ja katsotaan että se löytämä reitti on lyhin mahdollinen. Siihen ei oteta kantaa, mitä reittiä pitkin mennään perille, koska tavoitteena on (tällä hetkellä käytössä olevalla heuristiikalla) saada jokin lyhimmistä reiteistä, joita voi olla useampia. Lisäksi testeissä varmistetaan, että algoritmi ei lähde tutkimaan liikaa ruutuja väärään suuntaan, siis tarkistetaan onko se merkinnyt tietyt ruudut tutkituiksi vai ei. Lisäksi testauksessa on varauduttu algoritmin jumiutumiseen (jota ei pitäisi normaaliolosuhteissa tapahtua lainkaan) ja jos algoritmi jää jumiin, testi hylätään.

A*-reittialgoritmille on myös aloitettu suorituskykytestaus, jossa reittialgoritmille annetaan tahallaan 1 ms viive (jotta testi ei olisi liian riippuvainen käytetystä laitteistosta ja muista tekijöistä) ja sitten mitataan käytettyä ajan määrää ja varmistetaan, että se täyttää molemmat seuraavista kriteereistä: 1) Aikaa ei saa käyttää liikaa; jos reitin löytämiseen menee yli 1200 ms, testi hylätään. 2) Aikaa ei saa käyttää liian vähän. Jos reitin löytämiseen menee aikaa alle 200 ms, hidaste ei todennäköisesti ollut käytössä (kuten olisi pitänyt olla) joten suoritus hylätään. Siis: pystyäksemme toteamaan algoritmin nopeaksi on siinä oltava hidaste päällä ja sen on toimittava silti tarpeeksi nopeasti.

Prioriteettikeolle ja Jonolle tehtiin testejä, jollaiset ovat tyypillisiä alkioita varastoiville tietorakenteille. Testissä prioriteettikekoon työnnetään Integer ja String -tyyppisiä olioita, ja katsotaan että ne tulevat ulos oikeassa järjestyksessä. Testejä laadittaessa referenssinä käytettiin valmista Javan PriorityQueue -luokkaa, ja testit laadittiin siten että ne menevät läpi jos testattava luokka toimii samaan tapaan kuin PriorityQueue. Myös Jonoon työnnetään olioita ja katsotaan että ne tulevat ulos jonomaisessa järjestyksessä. Samalla pidetään huolta siitä, että jonon koko kasvaa järkevällä tavalla.
