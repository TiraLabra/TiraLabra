package gui;

import apuneuvot.MatriisienLukija;
import apuneuvot.MatriisienTallentaja;
import java.util.Scanner;
import javax.swing.JOptionPane;
import logiikka.Matriisilaskin;

/**
 * Kayttoliittyma-luokka, joka perii JFrame-luokan ja toimii matriisilaskimen 
 * graafisena käyttöliittymänä. Toteutettu Netbeansin GUI-builderilla.
 * 
 * @author Eversor
 */
public class Kayttoliittyma extends javax.swing.JFrame {

    private Scanner lukija;
    private MatriisienLukija matriisienlukija;
    private MatriisienTallentaja tallentaja;
    private Matriisilaskin laskin;
    
    /**
     * Konstruktori, joka luo uudet ilmentymät MatriisienLukijasta, 
     * -Tallentajasta sekä Matriisilaskin -luokista niiden private-muuttujiin. 
     * Lopuksi initialisoi komponentit.
     */
    public Kayttoliittyma() {
        matriisienlukija = new MatriisienLukija();
        tallentaja = new MatriisienTallentaja();
        laskin = new Matriisilaskin();

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        alustaPanel = new javax.swing.JPanel();
        matriisiAPanel = new javax.swing.JPanel();
        rivitALabel = new javax.swing.JLabel();
        rivitAText = new javax.swing.JTextField();
        sarakkeetALabel = new javax.swing.JLabel();
        sarakkeetAText = new javax.swing.JTextField();
        matriisiAScroll = new javax.swing.JScrollPane();
        matriisiAText = new javax.swing.JTextArea();
        lataaAText = new javax.swing.JTextField();
        neliomatriisiALabel = new javax.swing.JLabel();
        symmetrinenALabel = new javax.swing.JLabel();
        antisymmetrinenALabel = new javax.swing.JLabel();
        kaantyvaALabel = new javax.swing.JLabel();
        ortogonaalinenALabel = new javax.swing.JLabel();
        determinanttiALabel = new javax.swing.JLabel();
        tiedotAButton = new javax.swing.JButton();
        ortogonaalinenATulosLabel = new javax.swing.JLabel();
        determinanttiATulosLabel = new javax.swing.JLabel();
        antisymmetrinenATulosLabel = new javax.swing.JLabel();
        kaantyvaATulosLabel = new javax.swing.JLabel();
        symmetrinenATulosLabel = new javax.swing.JLabel();
        neliomatriisiATulosLabel = new javax.swing.JLabel();
        transpoosiAButton = new javax.swing.JButton();
        kaanteismatriisiAButton = new javax.swing.JButton();
        potenssiinAButton = new javax.swing.JButton();
        potenssiinAText = new javax.swing.JTextField();
        lataaAButton = new javax.swing.JButton();
        matriisiALabel = new javax.swing.JLabel();
        summaaButton = new javax.swing.JButton();
        vahennaButton = new javax.swing.JButton();
        kerroButton = new javax.swing.JButton();
        matriisiBPanel = new javax.swing.JPanel();
        rivitBLabel = new javax.swing.JLabel();
        rivitBText = new javax.swing.JTextField();
        sarakkeetBLabel = new javax.swing.JLabel();
        sarakkeetBText = new javax.swing.JTextField();
        matriisiBScroll = new javax.swing.JScrollPane();
        matriisiBText = new javax.swing.JTextArea();
        lataaBText = new javax.swing.JTextField();
        neliomatriisiBLabel = new javax.swing.JLabel();
        symmetrinenBLabel = new javax.swing.JLabel();
        antisymmetrinenBLabel = new javax.swing.JLabel();
        kaantyvaBLabel = new javax.swing.JLabel();
        ortogonaalinenBLabel = new javax.swing.JLabel();
        determinanttiBLabel = new javax.swing.JLabel();
        tiedotBButton = new javax.swing.JButton();
        ortogonaalinenBTulosLabel = new javax.swing.JLabel();
        determinanttiBTulosLabel = new javax.swing.JLabel();
        antisymmetrinenBTulosLabel = new javax.swing.JLabel();
        kaantyvaBTulosLabel = new javax.swing.JLabel();
        symmetrinenBTulosLabel = new javax.swing.JLabel();
        neliomatriisiBTulosLabel = new javax.swing.JLabel();
        transpoosiBButton = new javax.swing.JButton();
        kaanteismatriisiBButton = new javax.swing.JButton();
        potenssiinBButton = new javax.swing.JButton();
        potenssiinBText = new javax.swing.JTextField();
        lataaBButton = new javax.swing.JButton();
        matriisiBLabel = new javax.swing.JLabel();
        matriisiCPanel = new javax.swing.JPanel();
        rivitCLabel = new javax.swing.JLabel();
        rivitCText = new javax.swing.JTextField();
        sarakkeetCLabel = new javax.swing.JLabel();
        sarakkeetCText = new javax.swing.JTextField();
        matriisiCScroll = new javax.swing.JScrollPane();
        matriisiCText = new javax.swing.JTextArea();
        tallennaCText = new javax.swing.JTextField();
        neliomatriisiCLabel = new javax.swing.JLabel();
        symmetrinenCLabel = new javax.swing.JLabel();
        antisymmetrinenCLabel = new javax.swing.JLabel();
        kaantyvaCLabel = new javax.swing.JLabel();
        ortogonaalinenCLabel = new javax.swing.JLabel();
        determinanttiCLabel = new javax.swing.JLabel();
        tiedotCButton = new javax.swing.JButton();
        ortogonaalinenCTulosLabel = new javax.swing.JLabel();
        determinanttiCTulosLabel = new javax.swing.JLabel();
        antisymmetrinenCTulosLabel = new javax.swing.JLabel();
        kaantyvaCTulosLabel = new javax.swing.JLabel();
        symmetrinenCTulosLabel = new javax.swing.JLabel();
        neliomatriisiCTulosLabel = new javax.swing.JLabel();
        transpoosiCButton = new javax.swing.JButton();
        kaanteismatriisiCButton = new javax.swing.JButton();
        potenssiinCButton = new javax.swing.JButton();
        potenssiinCText = new javax.swing.JTextField();
        tallennaCButton = new javax.swing.JButton();
        vastausmatriisiLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Matriisilaskin");
        setMinimumSize(new java.awt.Dimension(720, 480));
        setResizable(false);

        alustaPanel.setPreferredSize(new java.awt.Dimension(720, 480));

        matriisiAPanel.setPreferredSize(new java.awt.Dimension(209, 420));

        rivitALabel.setText("Rivit");

        rivitAText.setMinimumSize(new java.awt.Dimension(28, 20));

        sarakkeetALabel.setText("Sarakkeet");

        sarakkeetAText.setMinimumSize(new java.awt.Dimension(28, 20));

        matriisiAText.setColumns(17);
        matriisiAText.setRows(5);
        matriisiAScroll.setViewportView(matriisiAText);

        lataaAText.setText("matriisi.txt");

        neliomatriisiALabel.setText("Neliömatriisi");

        symmetrinenALabel.setText("Symmetrinen");

        antisymmetrinenALabel.setText("Antisymmetrinen");

        kaantyvaALabel.setText("Kääntyvä");

        ortogonaalinenALabel.setText("Ortogonaalinen");

        determinanttiALabel.setText("Determinantti");

        tiedotAButton.setText("Määritä tiedot");
        tiedotAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tiedotAButtonActionPerformed(evt);
            }
        });

        ortogonaalinenATulosLabel.setText("-");

        determinanttiATulosLabel.setText("-");

        antisymmetrinenATulosLabel.setText("-");

        kaantyvaATulosLabel.setText("-");

        symmetrinenATulosLabel.setText("-");

        neliomatriisiATulosLabel.setText("-");

        transpoosiAButton.setText("Transpoosi");
        transpoosiAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transpoosiAButtonActionPerformed(evt);
            }
        });

        kaanteismatriisiAButton.setText("Käänteismatriisi");
        kaanteismatriisiAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kaanteismatriisiAButtonActionPerformed(evt);
            }
        });

        potenssiinAButton.setText("Potenssiin");
        potenssiinAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                potenssiinAButtonActionPerformed(evt);
            }
        });

        potenssiinAText.setText("2");
        potenssiinAText.setMinimumSize(new java.awt.Dimension(28, 20));

        lataaAButton.setText("Lataa");
        lataaAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lataaAButtonActionPerformed(evt);
            }
        });

        matriisiALabel.setText("Matriisi A");

        javax.swing.GroupLayout matriisiAPanelLayout = new javax.swing.GroupLayout(matriisiAPanel);
        matriisiAPanel.setLayout(matriisiAPanelLayout);
        matriisiAPanelLayout.setHorizontalGroup(
            matriisiAPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matriisiAPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(matriisiAPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(matriisiAPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(matriisiAScroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tiedotAButton)
                        .addGroup(matriisiAPanelLayout.createSequentialGroup()
                            .addComponent(lataaAButton)
                            .addGap(4, 4, 4)
                            .addComponent(lataaAText))
                        .addGroup(matriisiAPanelLayout.createSequentialGroup()
                            .addGroup(matriisiAPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(symmetrinenALabel)
                                .addComponent(neliomatriisiALabel))
                            .addGap(36, 36, 36)
                            .addGroup(matriisiAPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(neliomatriisiATulosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(symmetrinenATulosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(matriisiAPanelLayout.createSequentialGroup()
                            .addGroup(matriisiAPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(antisymmetrinenALabel)
                                .addComponent(kaantyvaALabel)
                                .addComponent(ortogonaalinenALabel)
                                .addComponent(determinanttiALabel))
                            .addGap(18, 18, 18)
                            .addGroup(matriisiAPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(antisymmetrinenATulosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(kaantyvaATulosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ortogonaalinenATulosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(determinanttiATulosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(matriisiAPanelLayout.createSequentialGroup()
                            .addComponent(rivitALabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(rivitAText, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(matriisiAPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(matriisiALabel)
                                .addGroup(matriisiAPanelLayout.createSequentialGroup()
                                    .addComponent(sarakkeetALabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(sarakkeetAText, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(transpoosiAButton)
                    .addComponent(kaanteismatriisiAButton)
                    .addGroup(matriisiAPanelLayout.createSequentialGroup()
                        .addComponent(potenssiinAButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(potenssiinAText, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        matriisiAPanelLayout.setVerticalGroup(
            matriisiAPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matriisiAPanelLayout.createSequentialGroup()
                .addComponent(matriisiALabel)
                .addGap(17, 17, 17)
                .addGroup(matriisiAPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rivitALabel)
                    .addComponent(rivitAText, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sarakkeetALabel)
                    .addComponent(sarakkeetAText, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(matriisiAScroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matriisiAPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lataaAText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lataaAButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matriisiAPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(neliomatriisiALabel)
                    .addComponent(neliomatriisiATulosLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matriisiAPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(symmetrinenALabel)
                    .addComponent(symmetrinenATulosLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matriisiAPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(antisymmetrinenALabel)
                    .addComponent(antisymmetrinenATulosLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matriisiAPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kaantyvaALabel)
                    .addComponent(kaantyvaATulosLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matriisiAPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ortogonaalinenALabel)
                    .addComponent(ortogonaalinenATulosLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matriisiAPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(determinanttiALabel)
                    .addComponent(determinanttiATulosLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tiedotAButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(transpoosiAButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kaanteismatriisiAButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matriisiAPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(potenssiinAButton)
                    .addComponent(potenssiinAText, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        summaaButton.setText("+");
        summaaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                summaaButtonActionPerformed(evt);
            }
        });

        vahennaButton.setText("-");
        vahennaButton.setPreferredSize(new java.awt.Dimension(41, 23));
        vahennaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vahennaButtonActionPerformed(evt);
            }
        });

        kerroButton.setText("*");
        kerroButton.setPreferredSize(new java.awt.Dimension(41, 23));
        kerroButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kerroButtonActionPerformed(evt);
            }
        });

        matriisiBPanel.setPreferredSize(new java.awt.Dimension(209, 420));

        rivitBLabel.setText("Rivit");

        rivitBText.setMinimumSize(new java.awt.Dimension(28, 20));

        sarakkeetBLabel.setText("Sarakkeet");

        sarakkeetBText.setMinimumSize(new java.awt.Dimension(28, 20));

        matriisiBText.setColumns(17);
        matriisiBText.setRows(5);
        matriisiBScroll.setViewportView(matriisiBText);

        lataaBText.setText("matriisi.txt");

        neliomatriisiBLabel.setText("Neliömatriisi");

        symmetrinenBLabel.setText("Symmetrinen");

        antisymmetrinenBLabel.setText("Antisymmetrinen");

        kaantyvaBLabel.setText("Kääntyvä");

        ortogonaalinenBLabel.setText("Ortogonaalinen");

        determinanttiBLabel.setText("Determinantti");

        tiedotBButton.setText("Määritä tiedot");
        tiedotBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tiedotBButtonActionPerformed(evt);
            }
        });

        ortogonaalinenBTulosLabel.setText("-");

        determinanttiBTulosLabel.setText("-");

        antisymmetrinenBTulosLabel.setText("-");

        kaantyvaBTulosLabel.setText("-");

        symmetrinenBTulosLabel.setText("-");

        neliomatriisiBTulosLabel.setText("-");

        transpoosiBButton.setText("Transpoosi");
        transpoosiBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transpoosiBButtonActionPerformed(evt);
            }
        });

        kaanteismatriisiBButton.setText("Käänteismatriisi");
        kaanteismatriisiBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kaanteismatriisiBButtonActionPerformed(evt);
            }
        });

        potenssiinBButton.setText("Potenssiin");
        potenssiinBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                potenssiinBButtonActionPerformed(evt);
            }
        });

        potenssiinBText.setText("2");
        potenssiinBText.setMinimumSize(new java.awt.Dimension(28, 20));

        lataaBButton.setText("Lataa");
        lataaBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lataaBButtonActionPerformed(evt);
            }
        });

        matriisiBLabel.setText("Matriisi B");

        javax.swing.GroupLayout matriisiBPanelLayout = new javax.swing.GroupLayout(matriisiBPanel);
        matriisiBPanel.setLayout(matriisiBPanelLayout);
        matriisiBPanelLayout.setHorizontalGroup(
            matriisiBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matriisiBPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(matriisiBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(matriisiBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(matriisiBScroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tiedotBButton)
                        .addGroup(matriisiBPanelLayout.createSequentialGroup()
                            .addComponent(lataaBButton)
                            .addGap(4, 4, 4)
                            .addComponent(lataaBText))
                        .addGroup(matriisiBPanelLayout.createSequentialGroup()
                            .addGroup(matriisiBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(symmetrinenBLabel)
                                .addComponent(neliomatriisiBLabel))
                            .addGap(36, 36, 36)
                            .addGroup(matriisiBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(neliomatriisiBTulosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(symmetrinenBTulosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(matriisiBPanelLayout.createSequentialGroup()
                            .addGroup(matriisiBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(antisymmetrinenBLabel)
                                .addComponent(kaantyvaBLabel)
                                .addComponent(ortogonaalinenBLabel)
                                .addComponent(determinanttiBLabel))
                            .addGap(18, 18, 18)
                            .addGroup(matriisiBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(antisymmetrinenBTulosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(kaantyvaBTulosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ortogonaalinenBTulosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(determinanttiBTulosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(matriisiBPanelLayout.createSequentialGroup()
                            .addComponent(rivitBLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(rivitBText, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(matriisiBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(matriisiBLabel)
                                .addGroup(matriisiBPanelLayout.createSequentialGroup()
                                    .addComponent(sarakkeetBLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(sarakkeetBText, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(transpoosiBButton)
                    .addComponent(kaanteismatriisiBButton)
                    .addGroup(matriisiBPanelLayout.createSequentialGroup()
                        .addComponent(potenssiinBButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(potenssiinBText, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        matriisiBPanelLayout.setVerticalGroup(
            matriisiBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matriisiBPanelLayout.createSequentialGroup()
                .addComponent(matriisiBLabel)
                .addGap(17, 17, 17)
                .addGroup(matriisiBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rivitBLabel)
                    .addComponent(rivitBText, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sarakkeetBLabel)
                    .addComponent(sarakkeetBText, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(matriisiBScroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matriisiBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lataaBText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lataaBButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matriisiBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(neliomatriisiBLabel)
                    .addComponent(neliomatriisiBTulosLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matriisiBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(symmetrinenBLabel)
                    .addComponent(symmetrinenBTulosLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matriisiBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(antisymmetrinenBLabel)
                    .addComponent(antisymmetrinenBTulosLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matriisiBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kaantyvaBLabel)
                    .addComponent(kaantyvaBTulosLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matriisiBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ortogonaalinenBLabel)
                    .addComponent(ortogonaalinenBTulosLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matriisiBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(determinanttiBLabel)
                    .addComponent(determinanttiBTulosLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tiedotBButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(transpoosiBButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kaanteismatriisiBButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matriisiBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(potenssiinBButton)
                    .addComponent(potenssiinBText, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        matriisiCPanel.setPreferredSize(new java.awt.Dimension(209, 420));

        rivitCLabel.setText("Rivit");

        rivitCText.setMinimumSize(new java.awt.Dimension(28, 20));

        sarakkeetCLabel.setText("Sarakkeet");

        sarakkeetCText.setMinimumSize(new java.awt.Dimension(28, 20));

        matriisiCText.setColumns(17);
        matriisiCText.setRows(5);
        matriisiCScroll.setViewportView(matriisiCText);

        tallennaCText.setText("vastaus.txt");

        neliomatriisiCLabel.setText("Neliömatriisi");

        symmetrinenCLabel.setText("Symmetrinen");

        antisymmetrinenCLabel.setText("Antisymmetrinen");

        kaantyvaCLabel.setText("Kääntyvä");

        ortogonaalinenCLabel.setText("Ortogonaalinen");

        determinanttiCLabel.setText("Determinantti");

        tiedotCButton.setText("Määritä tiedot");
        tiedotCButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tiedotCButtonActionPerformed(evt);
            }
        });

        ortogonaalinenCTulosLabel.setText("-");

        determinanttiCTulosLabel.setText("-");

        antisymmetrinenCTulosLabel.setText("-");

        kaantyvaCTulosLabel.setText("-");

        symmetrinenCTulosLabel.setText("-");

        neliomatriisiCTulosLabel.setText("-");

        transpoosiCButton.setText("Transpoosi");
        transpoosiCButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transpoosiCButtonActionPerformed(evt);
            }
        });

        kaanteismatriisiCButton.setText("Käänteismatriisi");
        kaanteismatriisiCButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kaanteismatriisiCButtonActionPerformed(evt);
            }
        });

        potenssiinCButton.setText("Potenssiin");
        potenssiinCButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                potenssiinCButtonActionPerformed(evt);
            }
        });

        potenssiinCText.setText("2");
        potenssiinCText.setMinimumSize(new java.awt.Dimension(28, 20));

        tallennaCButton.setText("Tallenna");
        tallennaCButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tallennaCButtonActionPerformed(evt);
            }
        });

        vastausmatriisiLabel.setText("Vastausmatriisi C");

        javax.swing.GroupLayout matriisiCPanelLayout = new javax.swing.GroupLayout(matriisiCPanel);
        matriisiCPanel.setLayout(matriisiCPanelLayout);
        matriisiCPanelLayout.setHorizontalGroup(
            matriisiCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matriisiCPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(matriisiCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(matriisiCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(matriisiCScroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tiedotCButton)
                        .addGroup(matriisiCPanelLayout.createSequentialGroup()
                            .addComponent(tallennaCButton)
                            .addGap(4, 4, 4)
                            .addComponent(tallennaCText))
                        .addGroup(matriisiCPanelLayout.createSequentialGroup()
                            .addGroup(matriisiCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(symmetrinenCLabel)
                                .addComponent(neliomatriisiCLabel))
                            .addGap(36, 36, 36)
                            .addGroup(matriisiCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(neliomatriisiCTulosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(symmetrinenCTulosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(matriisiCPanelLayout.createSequentialGroup()
                            .addGroup(matriisiCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(antisymmetrinenCLabel)
                                .addComponent(kaantyvaCLabel)
                                .addComponent(ortogonaalinenCLabel)
                                .addComponent(determinanttiCLabel))
                            .addGap(18, 18, 18)
                            .addGroup(matriisiCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(antisymmetrinenCTulosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(kaantyvaCTulosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ortogonaalinenCTulosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(determinanttiCTulosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(matriisiCPanelLayout.createSequentialGroup()
                            .addComponent(rivitCLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(matriisiCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(matriisiCPanelLayout.createSequentialGroup()
                                    .addComponent(rivitCText, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(sarakkeetCLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(sarakkeetCText, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, matriisiCPanelLayout.createSequentialGroup()
                                    .addComponent(vastausmatriisiLabel)
                                    .addGap(23, 23, 23)))))
                    .addComponent(transpoosiCButton)
                    .addComponent(kaanteismatriisiCButton)
                    .addGroup(matriisiCPanelLayout.createSequentialGroup()
                        .addComponent(potenssiinCButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(potenssiinCText, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(72, Short.MAX_VALUE))
        );
        matriisiCPanelLayout.setVerticalGroup(
            matriisiCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matriisiCPanelLayout.createSequentialGroup()
                .addComponent(vastausmatriisiLabel)
                .addGap(17, 17, 17)
                .addGroup(matriisiCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rivitCLabel)
                    .addComponent(rivitCText, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sarakkeetCLabel)
                    .addComponent(sarakkeetCText, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(matriisiCScroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matriisiCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tallennaCText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tallennaCButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matriisiCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(neliomatriisiCLabel)
                    .addComponent(neliomatriisiCTulosLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matriisiCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(symmetrinenCLabel)
                    .addComponent(symmetrinenCTulosLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matriisiCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(antisymmetrinenCLabel)
                    .addComponent(antisymmetrinenCTulosLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matriisiCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kaantyvaCLabel)
                    .addComponent(kaantyvaCTulosLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matriisiCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ortogonaalinenCLabel)
                    .addComponent(ortogonaalinenCTulosLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matriisiCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(determinanttiCLabel)
                    .addComponent(determinanttiCTulosLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tiedotCButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(transpoosiCButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kaanteismatriisiCButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matriisiCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(potenssiinCButton)
                    .addComponent(potenssiinCText, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout alustaPanelLayout = new javax.swing.GroupLayout(alustaPanel);
        alustaPanel.setLayout(alustaPanelLayout);
        alustaPanelLayout.setHorizontalGroup(
            alustaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(alustaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(matriisiAPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(alustaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(summaaButton)
                    .addComponent(vahennaButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kerroButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(matriisiBPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(matriisiCPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                .addContainerGap())
        );
        alustaPanelLayout.setVerticalGroup(
            alustaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(alustaPanelLayout.createSequentialGroup()
                .addGroup(alustaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(alustaPanelLayout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(summaaButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(vahennaButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kerroButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(matriisiAPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
                    .addComponent(matriisiBPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
                    .addComponent(matriisiCPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(alustaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(alustaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodi, joka summaa käyttöliitymän matriisit A ja B keskenään ja näyttää
     * summamatriisin käyttöliittymän vastausmatriisi C:ssä. Aluksi käyttö-
     * liittymän tietojen perusteella lataa ja luo matriisit A ja B, jonka
     * jälkeen päivittää niiden esitysmuodon käyttöliittymään jos eivät ole
     * null. Tämän jälkeen tarkastaa toteuttavatko matriisit yhteenlaskusäännön,
     * jonka jälkeen summaa matriisit ja näyttää summamatriisin vastausmatriisi
     * C:nä, jos kaikki on ok.
     * 
     * @param evt Painikkeen tapahtuma, jota ei hyödynnetä
     */
    private void summaaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_summaaButtonActionPerformed
        double[][] matriisiA = lataaJaLuoMatriisi(rivitAText.getText(), 
                                                  sarakkeetAText.getText(),
                                                  matriisiAText.getText(), 'A');
        double[][] matriisiB = lataaJaLuoMatriisi(rivitBText.getText(), 
                                                  sarakkeetBText.getText(),
                                                  matriisiBText.getText(), 'B');
        if(matriisiA == null || matriisiB == null){
            return;
        }
        naytaA(matriisiA);
        naytaB(matriisiB);
        if(!tarkastaSumma(matriisiA, matriisiB)){
            return;
        } 

        double[][] matriisiC = laskin.summaa(matriisiA, matriisiB);
        naytaC(matriisiC);
    }//GEN-LAST:event_summaaButtonActionPerformed

    /**
     * Metodi, joka määrittää matriisin tiedot käyttöliittymän oikeisiin
     * kohtiin. Aluksi käyttöliittymän tietojen perusteella lataa ja luo
     * matriisin, jonka jälkeen laskee ja päivittää tiedot, jos matriisi ei ole
     * null. Jos tietoja ei voida määrittää (esim. ei kääntyvä), asettaa
     * käyttöliittymään niiden tietojen kohdalle viivan.
     * 
     * @param evt Painikkeen tapahtuma, jota ei hyödynnetä
     */
    private void tiedotAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tiedotAButtonActionPerformed
        double[][] matriisi = lataaJaLuoMatriisi(rivitAText.getText(), 
                                                 sarakkeetAText.getText(),
                                                 matriisiAText.getText(), 'A');
        if(matriisi == null){
            return;
        }
        neliomatriisiATulosLabel.setText("" + laskin.onkoNeliomatriisi(matriisi));
        symmetrinenATulosLabel.setText("" + laskin.onkoSymmetrinen(matriisi));
        antisymmetrinenATulosLabel.setText("" + laskin.onkoAntisymmetrinen(matriisi));
        try {
            determinanttiATulosLabel.setText("" + laskin.laskeDeterminantti(matriisi));
            kaantyvaATulosLabel.setText("" + laskin.onkoKaantyva(matriisi));
            ortogonaalinenATulosLabel.setText("" + laskin.onkoOrtogonaalinen(matriisi));         
        } catch (Exception e) {
            determinanttiATulosLabel.setText("-");
            kaantyvaATulosLabel.setText("-");
            ortogonaalinenATulosLabel.setText("-");
        }
        naytaA(matriisi);
    }//GEN-LAST:event_tiedotAButtonActionPerformed

    /**
     * Metodi, joka määrittää matriisin tiedot käyttöliittymän oikeisiin
     * kohtiin. Aluksi käyttöliittymän tietojen perusteella lataa ja luo
     * matriisin, jonka jälkeen laskee ja päivittää tiedot, jos matriisi ei ole
     * null. Jos tietoja ei voida määrittää (esim. ei kääntyvä), asettaa
     * käyttöliittymään niiden tietojen kohdalle viivan.
     * 
     * @param evt Painikkeen tapahtuma, jota ei hyödynnetä
     */
    private void tiedotBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tiedotBButtonActionPerformed
        double[][] matriisi = lataaJaLuoMatriisi(rivitBText.getText(), 
                                                 sarakkeetBText.getText(),
                                                 matriisiBText.getText(), 'B');
        if(matriisi == null){
            return;
        } 
        neliomatriisiBTulosLabel.setText("" + laskin.onkoNeliomatriisi(matriisi));
        symmetrinenBTulosLabel.setText("" + laskin.onkoSymmetrinen(matriisi));
        antisymmetrinenBTulosLabel.setText("" + laskin.onkoAntisymmetrinen(matriisi));
        try {
            determinanttiBTulosLabel.setText("" + laskin.laskeDeterminantti(matriisi));
            kaantyvaBTulosLabel.setText("" + laskin.onkoKaantyva(matriisi));
            ortogonaalinenBTulosLabel.setText("" + laskin.onkoOrtogonaalinen(matriisi));
        } catch (Exception e) {
            determinanttiBTulosLabel.setText("-");
            kaantyvaBTulosLabel.setText("-");
            ortogonaalinenBTulosLabel.setText("-");
        }
        naytaB(matriisi);
    }//GEN-LAST:event_tiedotBButtonActionPerformed

    /**
     * Metodi, joka määrittää matriisin tiedot käyttöliittymän oikeisiin
     * kohtiin. Aluksi käyttöliittymän tietojen perusteella lataa ja luo
     * matriisin, jonka jälkeen laskee ja päivittää tiedot, jos matriisi ei ole
     * null. Jos tietoja ei voida määrittää (esim. ei kääntyvä), asettaa
     * käyttöliittymään niiden tietojen kohdalle viivan.
     * 
     * @param evt Painikkeen tapahtuma, jota ei hyödynnetä
     */
    private void tiedotCButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tiedotCButtonActionPerformed
        double[][] matriisi = lataaJaLuoMatriisi(rivitCText.getText(), 
                                                 sarakkeetCText.getText(),
                                                 matriisiCText.getText(), 'C');
        if(matriisi == null){
            return;
        }
        neliomatriisiCTulosLabel.setText("" + laskin.onkoNeliomatriisi(matriisi));
        symmetrinenCTulosLabel.setText("" + laskin.onkoSymmetrinen(matriisi));
        antisymmetrinenCTulosLabel.setText("" + laskin.onkoAntisymmetrinen(matriisi));
        try {
            determinanttiCTulosLabel.setText("" + laskin.laskeDeterminantti(matriisi));
            kaantyvaCTulosLabel.setText("" + laskin.onkoKaantyva(matriisi));
            ortogonaalinenCTulosLabel.setText("" + laskin.onkoOrtogonaalinen(matriisi));
        } catch (Exception e) {
            determinanttiCTulosLabel.setText("-");
            kaantyvaCTulosLabel.setText("-");
            ortogonaalinenCTulosLabel.setText("-");
        }
        naytaC(matriisi);
    }//GEN-LAST:event_tiedotCButtonActionPerformed

    /**
     * Metodi, joka vähentää käyttöliitymän matriisit A ja B keskenään ja 
     * näyttää erotusmatriisin käyttöliittymän vastausmatriisi C:ssä. Aluksi 
     * käyttöliittymän tietojen perusteella lataa ja luo matriisit A ja B, jonka
     * jälkeen päivittää niiden esitysmuodon käyttöliittymään jos eivät ole
     * null. Tämän jälkeen tarkastaa toteuttavatko matriisit vähennyslasku-
     * säännön, jonka jälkeen vähentää matriisit keskenään ja näyttää 
     * erotusmatriisin vastausmatriisi C:nä, jos kaikki on ok.
     * 
     * @param evt Painikkeen tapahtuma, jota ei hyödynnetä
     */
    private void vahennaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vahennaButtonActionPerformed
        double[][] matriisiA = lataaJaLuoMatriisi(rivitAText.getText(), 
                                                  sarakkeetAText.getText(),
                                                  matriisiAText.getText(), 'A');
        double[][] matriisiB = lataaJaLuoMatriisi(rivitBText.getText(), 
                                                  sarakkeetBText.getText(),
                                                  matriisiBText.getText(), 'B');
        if(matriisiA == null || matriisiB == null){
            return;
        }
        naytaA(matriisiA);
        naytaB(matriisiB);
        if(!tarkastaErotus(matriisiA, matriisiB)){
            return;
        } 

        double[][] matriisiC = laskin.vahenna(matriisiA, matriisiB);
        naytaC(matriisiC);
    }//GEN-LAST:event_vahennaButtonActionPerformed

    /**
     * Metodi, joka kertoo käyttöliitymän matriisit A ja B keskenään ja 
     * näyttää tulomatriisin käyttöliittymän vastausmatriisi C:ssä. Aluksi 
     * käyttöliittymän tietojen perusteella lataa ja luo matriisit A ja B, jonka
     * jälkeen päivittää niiden esitysmuodon käyttöliittymään jos eivät ole
     * null. Tämän jälkeen tarkastaa toteuttavatko matriisit kertolaskusäännön, 
     * jonka jälkeen yrittää kertoa matriisit keskenään käyttäen Strassenia. Jos
     * matriisit eivät ole samankokoisia neliömatriiseja, kertoo matriisit
     * keskenään käyttäen tavallista matriisin kertolaskua ja näyttää 
     * tulomatriisin vastausmatriisi C:nä, jos kaikki on ok.
     * 
     * @param evt Painikkeen tapahtuma, jota ei hyödynnetä
     */
    private void kerroButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kerroButtonActionPerformed
        double[][] matriisiA = lataaJaLuoMatriisi(rivitAText.getText(), 
                                                  sarakkeetAText.getText(),
                                                  matriisiAText.getText(), 'A');
        double[][] matriisiB = lataaJaLuoMatriisi(rivitBText.getText(), 
                                                  sarakkeetBText.getText(),
                                                  matriisiBText.getText(), 'B');
        if(matriisiA == null || matriisiB == null){
            return;
        }
        naytaA(matriisiA);
        naytaB(matriisiB);
        if(!tarkastaKertolasku(matriisiA, matriisiB)){
            return;
        } 
        double[][] matriisiC;
        try {
            matriisiC = laskin.kerroStrassenilla(matriisiA, matriisiB);
        } catch (Exception e) {
            matriisiC = laskin.kerro(matriisiA, matriisiB);
        }   
        naytaC(matriisiC);
    }//GEN-LAST:event_kerroButtonActionPerformed

    /**
     * Metodi, joka määrittää matriisin transpoosin käyttöliittymässä sen omaan
     * kohtaansa. Aluksi käyttöliittymän tietojen perusteella lataa ja luo
     * matriisin, jonka jälkeen määrittää sen transpoosin, jos matriisi ei ole
     * null. Lopuksi näyttää transpoosin käyttöliittymän omassa kohdassaan.
     * 
     * @param evt Painikkeen tapahtuma, jota ei hyödynnetä
     */
    private void transpoosiAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transpoosiAButtonActionPerformed
        double[][] matriisi = lataaJaLuoMatriisi(rivitAText.getText(), 
                                                 sarakkeetAText.getText(),
                                                 matriisiAText.getText(), 'A');
        if(matriisi == null){
            return;
        }
        matriisi = laskin.transpoosaa(matriisi);
        naytaA(matriisi);
    }//GEN-LAST:event_transpoosiAButtonActionPerformed

    /**
     * Metodi, joka määrittää matriisin transpoosin käyttöliittymässä sen omaan
     * kohtaansa. Aluksi käyttöliittymän tietojen perusteella lataa ja luo
     * matriisin, jonka jälkeen määrittää sen transpoosin, jos matriisi ei ole
     * null. Lopuksi näyttää transpoosin käyttöliittymän omassa kohdassaan.
     * 
     * @param evt Painikkeen tapahtuma, jota ei hyödynnetä
     */
    private void transpoosiBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transpoosiBButtonActionPerformed
        double[][] matriisi = lataaJaLuoMatriisi(rivitBText.getText(), 
                                                 sarakkeetBText.getText(),
                                                 matriisiBText.getText(), 'B');
        if(matriisi == null){
            return;
        }
        matriisi = laskin.transpoosaa(matriisi);
        naytaB(matriisi);
    }//GEN-LAST:event_transpoosiBButtonActionPerformed

    /**
     * Metodi, joka määrittää matriisin transpoosin käyttöliittymässä sen omaan
     * kohtaansa. Aluksi käyttöliittymän tietojen perusteella lataa ja luo
     * matriisin, jonka jälkeen määrittää sen transpoosin, jos matriisi ei ole
     * null. Lopuksi näyttää transpoosin käyttöliittymän omassa kohdassaan.
     * 
     * @param evt Painikkeen tapahtuma, jota ei hyödynnetä
     */
    private void transpoosiCButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transpoosiCButtonActionPerformed
        double[][] matriisi = lataaJaLuoMatriisi(rivitCText.getText(), 
                                                 sarakkeetCText.getText(),
                                                 matriisiCText.getText(), 'C');
        if(matriisi == null){
            return;
        }
        matriisi = laskin.transpoosaa(matriisi);
        naytaC(matriisi);
    }//GEN-LAST:event_transpoosiCButtonActionPerformed

    /**
     * Metodi, joka määrittää matriisin käänteismatriisin käyttöliittymässä sen 
     * omaan kohtaansa. Aluksi käyttöliittymän tietojen perusteella lataa ja luo
     * matriisin, jonka jälkeen laskee sen käänteismatriisin, jos matriisi on
     * neliömatriisi. Jos matriisi ei ole kääntyvä, avaa virhe-popupin. Lopuksi 
     * näyttää käänteismatriisin käyttöliittymän omassa kohdassaan.
     * 
     * @param evt Painikkeen tapahtuma, jota ei hyödynnetä
     */
    private void kaanteismatriisiAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kaanteismatriisiAButtonActionPerformed
        double[][] matriisi = lataaJaLuoMatriisi(rivitAText.getText(), 
                                                 sarakkeetAText.getText(),
                                                 matriisiAText.getText(), 'A');
        if(!tarkastaNelio(matriisi)){
            return;
        }
        try {
            matriisi = laskin.invertoi(matriisi);
        } catch (Exception e) {
            virheInvertoi();
        }    
        naytaA(matriisi);
    }//GEN-LAST:event_kaanteismatriisiAButtonActionPerformed

    /**
     * Metodi, joka määrittää matriisin käänteismatriisin käyttöliittymässä sen 
     * omaan kohtaansa. Aluksi käyttöliittymän tietojen perusteella lataa ja luo
     * matriisin, jonka jälkeen laskee sen käänteismatriisin, jos matriisi on
     * neliömatriisi. Jos matriisi ei ole kääntyvä, avaa virhe-popupin. Lopuksi 
     * näyttää käänteismatriisin käyttöliittymän omassa kohdassaan.
     * 
     * @param evt Painikkeen tapahtuma, jota ei hyödynnetä
     */
    private void kaanteismatriisiBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kaanteismatriisiBButtonActionPerformed
        double[][] matriisi = lataaJaLuoMatriisi(rivitBText.getText(), 
                                                 sarakkeetBText.getText(),
                                                 matriisiBText.getText(), 'B');
        if(!tarkastaNelio(matriisi)){
            return;
        }
        try {
            matriisi = laskin.invertoi(matriisi);
        } catch (Exception e) {
            virheInvertoi();
        }    
        naytaB(matriisi);
    }//GEN-LAST:event_kaanteismatriisiBButtonActionPerformed

    /**
     * Metodi, joka määrittää matriisin käänteismatriisin käyttöliittymässä sen 
     * omaan kohtaansa. Aluksi käyttöliittymän tietojen perusteella lataa ja luo
     * matriisin, jonka jälkeen laskee sen käänteismatriisin, jos matriisi on
     * neliömatriisi. Jos matriisi ei ole kääntyvä, avaa virhe-popupin. Lopuksi 
     * näyttää käänteismatriisin käyttöliittymän omassa kohdassaan.
     * 
     * @param evt Painikkeen tapahtuma, jota ei hyödynnetä
     */
    private void kaanteismatriisiCButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kaanteismatriisiCButtonActionPerformed
        double[][] matriisi = lataaJaLuoMatriisi(rivitCText.getText(), 
                                                 sarakkeetCText.getText(),
                                                 matriisiCText.getText(), 'C');
        if(!tarkastaNelio(matriisi)){
            return;
        }
        try {
            matriisi = laskin.invertoi(matriisi);
        } catch (Exception e) {
            virheInvertoi();
        }    
        naytaC(matriisi);
    }//GEN-LAST:event_kaanteismatriisiCButtonActionPerformed

    /**
     * Metodi, joka laskee matriisin potenssin käyttöliittymässä sen omaan 
     * kohtaansa. Aluksi käyttöliittymän tietojen perusteella lataa ja luo
     * matriisin, jonka jälkeen laskee sen potenssin, jos matriisi on
     * neliömatriisi. Jos matriisin potenssi -tekstin muunnoksessa 
     * kokonaisluvuksi tapahtuu virhe, avaa virhe-popupin. Lopuksi näyttää 
     * potenssimatriisin käyttöliittymän omassa kohdassaan.
     * 
     * @param evt Painikkeen tapahtuma, jota ei hyödynnetä
     */
    private void potenssiinAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_potenssiinAButtonActionPerformed
        double[][] matriisi = lataaJaLuoMatriisi(rivitAText.getText(), 
                                                 sarakkeetAText.getText(),
                                                 matriisiAText.getText(), 'A');
        if(!tarkastaNelio(matriisi)){
            return;
        }
        try {
            matriisi = laskin.neliomatriisiPotenssiin(matriisi, 
                       Integer.parseInt(potenssiinAText.getText()));
        } catch (Exception e) {
            virhePotenssi();
            return;
        }
        naytaA(matriisi);
    }//GEN-LAST:event_potenssiinAButtonActionPerformed

    /**
     * Metodi, joka laskee matriisin potenssin käyttöliittymässä sen omaan 
     * kohtaansa. Aluksi käyttöliittymän tietojen perusteella lataa ja luo
     * matriisin, jonka jälkeen laskee sen potenssin, jos matriisi on
     * neliömatriisi. Jos matriisin potenssi -tekstin muunnoksessa 
     * kokonaisluvuksi tapahtuu virhe, avaa virhe-popupin. Lopuksi näyttää 
     * potenssimatriisin käyttöliittymän omassa kohdassaan.
     * 
     * @param evt Painikkeen tapahtuma, jota ei hyödynnetä
     */
    private void potenssiinBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_potenssiinBButtonActionPerformed
        double[][] matriisi = lataaJaLuoMatriisi(rivitBText.getText(), 
                                                 sarakkeetBText.getText(),
                                                 matriisiBText.getText(), 'B');
        if(!tarkastaNelio(matriisi)){
            return;
        }
        try {
            matriisi = laskin.neliomatriisiPotenssiin(matriisi, 
                       Integer.parseInt(potenssiinBText.getText()));
        } catch (Exception e) {
            virhePotenssi();
            return;
        }
        naytaB(matriisi);
    }//GEN-LAST:event_potenssiinBButtonActionPerformed

    /**
     * Metodi, joka laskee matriisin potenssin käyttöliittymässä sen omaan 
     * kohtaansa. Aluksi käyttöliittymän tietojen perusteella lataa ja luo
     * matriisin, jonka jälkeen laskee sen potenssin, jos matriisi on
     * neliömatriisi. Jos matriisin potenssi -tekstin muunnoksessa 
     * kokonaisluvuksi tapahtuu virhe, avaa virhe-popupin. Lopuksi näyttää 
     * potenssimatriisin käyttöliittymän omassa kohdassaan.
     * 
     * @param evt Painikkeen tapahtuma, jota ei hyödynnetä
     */
    private void potenssiinCButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_potenssiinCButtonActionPerformed
        double[][] matriisi = lataaJaLuoMatriisi(rivitCText.getText(), 
                                                 sarakkeetCText.getText(),
                                                 matriisiCText.getText(), 'C');
        if(!tarkastaNelio(matriisi)){
            return;
        }
        try {
            matriisi = laskin.neliomatriisiPotenssiin(matriisi, 
                       Integer.parseInt(potenssiinCText.getText()));
        } catch (Exception e) {
            virhePotenssi();
            return;
        }
        naytaC(matriisi);
    }//GEN-LAST:event_potenssiinCButtonActionPerformed

    /**
     * Metodi, joka lataa lataus -tekstin perusteella tiedostosta matriisin ja
     * päivittää sen käyttöliittymässä omaan kohtaansa.
     * 
     * @param evt Painikkeen tapahtuma, jota ei hyödynnetä
     */
    private void lataaAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lataaAButtonActionPerformed
        lataa(lataaAText.getText(), 'A');
    }//GEN-LAST:event_lataaAButtonActionPerformed

    /**
     * Metodi, joka lataa lataus -tekstin perusteella tiedostosta matriisin ja
     * päivittää sen käyttöliittymässä omaan kohtaansa.
     * 
     * @param evt Painikkeen tapahtuma, jota ei hyödynnetä
     */
    private void lataaBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lataaBButtonActionPerformed
        lataa(lataaBText.getText(), 'B');
    }//GEN-LAST:event_lataaBButtonActionPerformed

    /**
     * Metodi, joka tallentaa käyttöliittymän vastausmatriisi C:ssä olevan 
     * matriisin tallenna -tekstin perusteella tiedostoon. Aluksi 
     * käyttöliittymän tietojen perusteella lataa ja luo matriisin, jonka 
     * jälkeen yrittää tallentaa sen tiedostoon, jos matriisi ei ole null. Jos 
     * matriisin tallennuksessa tapahtuu virhe, avaa virhe-popupin.
     * 
     * @param evt Painikkeen tapahtuma, jota ei hyödynnetä
     */
    private void tallennaCButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tallennaCButtonActionPerformed
        double[][] matriisi = lataaJaLuoMatriisi(rivitCText.getText(), 
                                                 sarakkeetCText.getText(),
                                                 matriisiCText.getText(), 'C');
        if(matriisi == null){
            return;
        }
        try {
            tallentaja.tallenna(matriisi, tallennaCText.getText());
        } catch (Exception e) {
            virheTallennus();
        }
    }//GEN-LAST:event_tallennaCButtonActionPerformed

    /**
     * Metodi, joka tarkastaa onko parametrina annettu matriisi neliömatriisi ja
     * palauttaa true, jos on. Jos ei ole neliömatriisi, avaa virhe-popupin ja
     * palauttaa false.
     * 
     * @param matriisi Matriisi, josta halutaa tietää onko neliömatriisi, muotoa
     *                 m x n
     * @return Palauttaa true, jos on neliömatriisi
     */
    private boolean tarkastaNelio(double[][] matriisi) {
        if(matriisi == null){
            return false;
        } else if(!laskin.onkoNeliomatriisi(matriisi)){
            virheEiNelio();
            return false;
        }
        return true;
    }
    
    /**
     * Metodi, joka lataa parametrina annetusta tiedostonimestä matriisin ja
     * näyttää sen oikeassa kohdassa käyttöliittymässä. Jos tiedostonlukeminen 
     * epäonnistuu, avaa virhe-popupin.
     * 
     * @param tiedostonimi Tiedostonimi, josta matriisi ladataan
     * @param tunniste Tunniste-kirjain käyttöliittymän matriisille, jossa
     *                 ladattu matriisi näytetään
     */
    private void lataa(String tiedostonimi, char tunniste) {
        try {
            double[][] matriisi = matriisienlukija.lue(tiedostonimi);
            if(tunniste == 'A') {
                naytaA(matriisi);
            } else {
                naytaB(matriisi);
            }     
        } catch (Exception e) {
            virheLataus();
        }
    }
    
    /**
     * Metodi, joka lataa ja luo matriisin parametrina annettujen tietojen
     * perusteella. Lataa aluksi rivit ja sarakkeet ja jos tämä epäonnistuu, 
     * niin palauttaa null. Muutoin palauttaa luoMatriisi-metodin tuottaman 
     * matriisin.
     * 
     * @param rivit Merkkijono, joka sisältää matriisin rivimäärän
     * @param sarakkeet Merkkijono, joka sisältää matriisin sarakemäärän
     * @param matriisiS Merkkijono, joka sisältää matriisin alkiot
     * @param tunniste Tunniste-kirjain käyttöliittymän matriisille, jossa
     *                 ladattu ja luotu matriisi näytetään
     * @return Palauttaa luoMatriisi-metodin tuottaman matriisin, muotoa m x n
     */
    private double[][] lataaJaLuoMatriisi(String rivit, String sarakkeet, 
                                          String matriisiS, char tunniste) {
        int rivitM = lataaRivit(rivit, tunniste);
        if(rivitM == -1) {
            return null;
        }
        int sarakkeetM = lataaSarakkeet(sarakkeet, tunniste);
        if (sarakkeetM == -1) {
            return null;       
        }
        return luoMatriisi(rivitM, sarakkeetM, matriisiS, tunniste);
    }
    
    /**
     * Metodi, joka lataa rivit parametrina annetusta merkkijonosta. Jos rivi-
     * määrän lukeminen epäonnistuu, avaa virhe-popupin ja palauttaa -1.
     * 
     * @param rivit Merkkijono, joka sisältää ladattavan rivimäärän
     * @param tunniste Tunniste-kirjain käyttöliityymän matriisille, jolle
     *                 mahdollinen virhe-popup osoitetaan
     * @return Palauttaa ladatun rivimäärän
     */
    private int lataaRivit(String rivit, char tunniste) {
        try {
            return Integer.parseInt(rivit);
        } catch (Exception e) {
            virheKoko(tunniste);
            return -1;
        }
    }
    
    /**
     * Metodi, joka lataa sarakkeet parametrina annetusta merkkijonosta. Jos 
     * sarakemäärän lukeminen epäonnistuu, avaa virhe-popupin ja palauttaa -1.
     * 
     * @param sarakkeet Merkkijono, joka sisältää ladattavan sarakemäärän
     * @param tunniste Tunniste-kirjain käyttöliityymän matriisille, jolle
     *                 mahdollinen virhe-popup osoitetaan
     * @return Palauttaa ladatun sarakemäärän
     */
    private int lataaSarakkeet(String sarakkeet, char tunniste) {
        try {
            return Integer.parseInt(sarakkeet);
        } catch (Exception e) {
            virheKoko(tunniste);
            return -1;
        }
    }

    /**
     * Metodi, joka luo matriisin parametrina annettujen tietojen perusteella.
     * Aluksi tarkastaa matriisin koon, eli että rivit ja sarakkeet ovat
     * positiivisia kokonaislukuja. Tämän jälkeen tarkastaa, että matriisin
     * alkiot sisältävässä merkkijonossa on vähintään tarvittava määrä merkkejä.
     * Jos ei ole riittävästi merkkejä, niin avaa virhe-popupin. Tarkastusten
     * epäonnistuessa palauttaa null. Lopuksi palauttaa lueMatriisi-metodin
     * tuottaman matriisin.
     * 
     * @param rivit Kokonaisluku, joka kertoo matriisin rivimäärän
     * @param sarakkeet Kokonaisluku, joka kertoo matriisin sarakemäärän
     * @param matriisiS Merkkijono, joka sisältää matriisin alkiot
     * @param tunniste Tunniste-kirjain käyttöliittymän matriisille, jossa
     *                 ladattu ja luotu matriisi näytetään
     * @return Palauttaa lueMatriisi-metodin tuottaman matriisin, muotoa m x n
     */
    private double[][] luoMatriisi(int rivit, int sarakkeet, 
                                   String matriisiS, char tunniste) {
        if(!tarkastaKoko(rivit, sarakkeet, tunniste)) {
            return null;
        } else if(matriisiS.length() < 2 * (rivit - 1) * sarakkeet) {
            virheMatriisi(tunniste);
            return null;
        }  
        return lueMatriisi(rivit, sarakkeet, matriisiS, tunniste);
    }

    /**
     * Metodi, joka lukee parametrina annetuista tiedoista matriisin ja 
     * palauttaa sen, jos virheitä ei tapahdu. Jos tapahtuu virhe, avaa virhe-
     * popupin ja palauttaa null.
     * 
     * @param rivitM Kokonaisluku, joka kertoo matriisin rivimäärän
     * @param sarakkeetM Kokonaisluku, joka kertoo matriisin sarakemäärän
     * @param matriisiS Merkkijono, joka sisältää matriisin alkiot
     * @param tunniste Tunniste-kirjain käyttöliittymän matriisille, jossa
     *                 ladattu ja luotu matriisi näytetään
     * @return Palauttaa luetun matriisin, muotoa m x n
     */
    private double[][] lueMatriisi(int rivitM, int sarakkeetM, String matriisiS, 
                                   char tunniste) {
        lukija = new Scanner(matriisiS);
        double[][] matriisi = new double[rivitM][sarakkeetM];
        for (int rivit = 0; rivit < rivitM; rivit++) {
            for (int sarakkeet = 0; sarakkeet < sarakkeetM; sarakkeet++) {
                try {
                    matriisi[rivit][sarakkeet] = Double.parseDouble(lukija.next());
                } catch (Exception e) {
                    virheMatriisi(tunniste);
                    return null;
                }
            }
        }
        lukija.close();
        return matriisi;
    }
    
    /**
     * Metodi, joka näyttää matriisi A:n käyttöliittymän oikeassa kohdassa.
     * 
     * @param A Matriisi, joka halutaan näyttää käyttöliittymässä, muotoa m x n
     */
    private void naytaA(double[][] A) {
        rivitAText.setText("" + A.length);
        sarakkeetAText.setText("" + A[0].length);
        matriisiAText.setText(matriisiStringiksi(A));
    }
    
    /**
     * Metodi, joka näyttää matriisi B:n käyttöliittymän oikeassa kohdassa.
     * 
     * @param B Matriisi, joka halutaan näyttää käyttöliittymässä, muotoa m x n
     */
    private void naytaB(double[][] B) {
        rivitBText.setText("" + B.length);
        sarakkeetBText.setText("" + B[0].length);
        matriisiBText.setText(matriisiStringiksi(B));
    }

    /**
     * Metodi, joka näyttää matriisi C:n käyttöliittymän oikeassa kohdassa.
     * 
     * @param C Matriisi, joka halutaa näyttää käyttöliittymässä, muotoa m x n
     */
    private void naytaC(double[][] C) {
        rivitCText.setText("" + C.length);
        sarakkeetCText.setText("" + C[0].length);
        matriisiCText.setText(matriisiStringiksi(C));
    }
    
    /**
     * Metodi, joka muuttaa parametrina annetun matriisin merkkijonoksi.
     * 
     * @param matriisi Matriisi, joka halutaan muuttaa merkkijonoksi, 
     *                 muotoa m x n
     * @return Palauttaa matriisista luodun merkkijonon
     */
    private String matriisiStringiksi(double[][] matriisi) {
        String matriisiS = "";
        for (int rivit = 0; rivit < matriisi.length; rivit++) {
            for (int sarakkeet = 0; sarakkeet < matriisi[0].length; sarakkeet++) {
                matriisiS += matriisi[rivit][sarakkeet]+"   ";
            }
            matriisiS += "\n";
        }
        return matriisiS;
    }
    
    /**
     * Metodi, joka tarkastaa toteuttavatko parametrina annetut matriisit
     * matriisien yhteenlaskusäännön. Avaa virhe-popupin, jos eivät toteuta ja
     * palauttaa tällöin false.
     * 
     * @param A Ensimmäinen yhteenlaskettava matriisi, muotoa m x n
     * @param B Toinen yhteenlaskettava matriisi, muotoa p x q
     * @return Palauttaa true, jos matriisit toteuttavat matriisien 
     *         yhteenlaskusäännön
     */
    private boolean tarkastaSumma(double[][] A, double[][] B) {
        if (A.length != B.length || A[0].length != B[0].length) {
            virheSumma();
            return false;
        }
        return true;
    }
    
    /**
     * Metodi, joka tarkastaa toteuttavatko parametrina annetut matriisit
     * matriisien vähennyslaskusäännön. Avaa virhe-popupin, jos eivät toteuta
     * ja palauttaa tällöin false.
     * 
     * @param A Matriisi, josta vähennetään toinen matriisi, muotoa m x n
     * @param B Matriisi, joka vähennetään ensimmäisestä matriisista, 
     *          muotoa p x q
     * @return Palauttaa true, jos matriisit toteuttavat matriisien 
     *         yhteenlaskusäännön
     */
    private boolean tarkastaErotus(double[][] A, double[][] B) {
        if (A.length != B.length || A[0].length != B[0].length) {
            virheVahennys();
            return false;
        }
        return true;
    }
    
    /**
     * Metodi, joka tarkastaa toteuttavatko parametrina annetut matriisit
     * matriisien kertolaskusäännön. Avaa virhe-popupin, jos eivät toteuta ja
     * palauttaa tällöin false.
     * 
     * @param A Vasemmalta luettuna ensimmäinen matriisi, joka kerrotaan, 
     *          muotoa m x n
     * @param B Vasemmalta luettuna toinen matriisi, joka kerrotaan, 
     *          muotoa p x q
     * @return Palauttaa true, jos matriisit toteuttavat matriisien 
     *         kertolaskusäännön
     */
    private boolean tarkastaKertolasku(double[][] A, double[][] B) {
        if (A[0].length != B.length) {
            virheKertolasku();
            return false;
        }
        return true;
    }
    
    /**
     * Metodi, joka tarkastaa ovatko parametrina annetut rivit ja sarakkeet 
     * suurempia kuin nolla. Jos eivät ole, niin avaa virhe-popupin ja palauttaa
     * false.
     * 
     * @param rivit Kokonaisluku, joka kertoo rivimäärän
     * @param sarakkeet Kokonaisluku, joka kertoo sarakemäärän
     * @param tunniste Tunniste-kirjain käyttöliittymän matriisille, jossa
     *                 tarkastettu matriisi näytetään 
     * @return Palauttaa true, jos rivit ja sarakkeet ovat suurempia kuin nolla
     */
    private boolean tarkastaKoko(int rivit, int sarakkeet, char tunniste) {
        if(rivit <= 0 || sarakkeet <= 0) {
            virheKoko(tunniste);
            return false;
        }
        return true;
    }
    
    /**
     * Metodi, joka toteuttaa virhe-popupin matriisin koon ollessa väärä.
     * 
     * @param tunniste Tunniste-kirjain käyttöliittymän matriisille, jolle
     *                 virhe-popup osoitetaan
     */
    private void virheKoko(char tunniste) {
        JOptionPane.showMessageDialog(this, "Virhe:\n"
                + "\nTarkasta, että matriisin "+tunniste+" kokomäärityksissä"
                + "\nkäytetään vain positiivisia kokonaislukuja, eikä siellä"
                + "\nole ylimääräisiä välilyöntejä", "Virhe",
                JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Metodi, joka toteuttaa virhe-popupin matriisien yhteenlaskun
     * epäonnistuessa.
     * 
     */
    private void virheSumma() {
        JOptionPane.showMessageDialog(this, "Virhe:\n"
                + "\nMatriisien yhteenlaskussa yhteenlaskettavien matriisien"
                + "\nkoot pitää olla samat", "Virhe",
                JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Metodi, joka toteuttaa virhe-popupin matriisien vähennyslaskun
     * epäonnistuessa.
     * 
     */
    private void virheVahennys() {
        JOptionPane.showMessageDialog(this, "Virhe:\n"
                + "\nMatriisien vähennyslaskussa toisistaan vähennettävien"
                + "\nmatriisien koot pitää olla samat", "Virhe",
                JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Metodi, joka toteuttaa virhe-popupin matriisien kertolaskun
     * epäonnistuessa.
     * 
     */
    private void virheKertolasku() {
        JOptionPane.showMessageDialog(this, "Virhe:\n"
                + "\nMatriisien kertolaskussa vasemmanpuoleisen matriisin"
                + "\nsarakkeiden määrä pitää olla sama kuin oikeanpuoleisen"
                + "\nmatriisin rivien määrä", "Virhe",
                JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Metodi, joka toteuttaa virhe-popupin matriisin ollessa jotain muuta kuin
     * neliömatriisi.
     * 
     */
    private void virheEiNelio() {
        JOptionPane.showMessageDialog(this, "Virhe:\n"
                + "\nMatriisin pitää olla neliömatriisi", "Virhe",
                JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Metodi, joka toteuttaa virhe-popupin matriisin ollessa singulaarinen.
     * 
     */
    private void virheInvertoi() {
        JOptionPane.showMessageDialog(this, "Virhe:\n"
                + "\nMatriisi ei ole kääntyvä, joten sillä ei ole"
                + "\nkäänteismatriisia", "Virhe",
                JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Metodi, joka toteuttaa virhe-popupin potenssin ollessa pienempi kuin
     * nolla.
     * 
     */
    private void virhePotenssi() {
        JOptionPane.showMessageDialog(this, "Virhe:\n"
                + "\nTarkasta, että olet antanut potenssiksi nollaa suuremman"
                + "\ntai yhtäsuuren arvon", "Virhe",
                JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Metodi, joka toteuttaa virhe-popupin tiedostonlatauksen epäonnistuttua.
     * 
     */
    private void virheLataus() {
        JOptionPane.showMessageDialog(this, "Virhe:\n"
                + "\nTarkasta, että ladattava tiedosto sijaitsee ohjelman"
                + "\nkanssa samassa hakemistopolussa", "Virhe",
                JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Metodi, joka toteuttaa virhe-popupin tallennuksen epäonnistuttua.
     * 
     */
    private void virheTallennus() {
        JOptionPane.showMessageDialog(this, "Virhe:\n"
                + "\nTarkasta, että tallennettava tiedostonimi sisältää vain"
                + "\ntavallisia tiedostonimessä hyväksyttäviä merkkejä. "
                + "\nTiedostonimessä täytyy olla edes yksi merkki.", "Virhe",
                JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Metodi, joka toteuttaa virhe-popupin matriisin syötteen ollessa
     * epäkelvollinen.
     * 
     * @param tunniste Tunniste-kirjain käyttöliittymän matriisille, jolle
     *                 virhe-popup osoitetaan
     */
    private void virheMatriisi(char tunniste) {
        JOptionPane.showMessageDialog(this, "Virhe:\n"
                + "\nMatriisin "+tunniste+" syötteessä tapahtui virhe. Tarkasta,"
                + "\nettä se sisältää vain liukulukuja. Tarkasta myös, että"
                + "\nalkioita on oikea määrä.", "Virhe",
                JOptionPane.ERROR_MESSAGE);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Kayttoliittyma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Kayttoliittyma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Kayttoliittyma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Kayttoliittyma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Kayttoliittyma().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel alustaPanel;
    private javax.swing.JLabel antisymmetrinenALabel;
    private javax.swing.JLabel antisymmetrinenATulosLabel;
    private javax.swing.JLabel antisymmetrinenBLabel;
    private javax.swing.JLabel antisymmetrinenBTulosLabel;
    private javax.swing.JLabel antisymmetrinenCLabel;
    private javax.swing.JLabel antisymmetrinenCTulosLabel;
    private javax.swing.JLabel determinanttiALabel;
    private javax.swing.JLabel determinanttiATulosLabel;
    private javax.swing.JLabel determinanttiBLabel;
    private javax.swing.JLabel determinanttiBTulosLabel;
    private javax.swing.JLabel determinanttiCLabel;
    private javax.swing.JLabel determinanttiCTulosLabel;
    private javax.swing.JButton kaanteismatriisiAButton;
    private javax.swing.JButton kaanteismatriisiBButton;
    private javax.swing.JButton kaanteismatriisiCButton;
    private javax.swing.JLabel kaantyvaALabel;
    private javax.swing.JLabel kaantyvaATulosLabel;
    private javax.swing.JLabel kaantyvaBLabel;
    private javax.swing.JLabel kaantyvaBTulosLabel;
    private javax.swing.JLabel kaantyvaCLabel;
    private javax.swing.JLabel kaantyvaCTulosLabel;
    private javax.swing.JButton kerroButton;
    private javax.swing.JButton lataaAButton;
    private javax.swing.JTextField lataaAText;
    private javax.swing.JButton lataaBButton;
    private javax.swing.JTextField lataaBText;
    private javax.swing.JLabel matriisiALabel;
    private javax.swing.JPanel matriisiAPanel;
    private javax.swing.JScrollPane matriisiAScroll;
    private javax.swing.JTextArea matriisiAText;
    private javax.swing.JLabel matriisiBLabel;
    private javax.swing.JPanel matriisiBPanel;
    private javax.swing.JScrollPane matriisiBScroll;
    private javax.swing.JTextArea matriisiBText;
    private javax.swing.JPanel matriisiCPanel;
    private javax.swing.JScrollPane matriisiCScroll;
    private javax.swing.JTextArea matriisiCText;
    private javax.swing.JLabel neliomatriisiALabel;
    private javax.swing.JLabel neliomatriisiATulosLabel;
    private javax.swing.JLabel neliomatriisiBLabel;
    private javax.swing.JLabel neliomatriisiBTulosLabel;
    private javax.swing.JLabel neliomatriisiCLabel;
    private javax.swing.JLabel neliomatriisiCTulosLabel;
    private javax.swing.JLabel ortogonaalinenALabel;
    private javax.swing.JLabel ortogonaalinenATulosLabel;
    private javax.swing.JLabel ortogonaalinenBLabel;
    private javax.swing.JLabel ortogonaalinenBTulosLabel;
    private javax.swing.JLabel ortogonaalinenCLabel;
    private javax.swing.JLabel ortogonaalinenCTulosLabel;
    private javax.swing.JButton potenssiinAButton;
    private javax.swing.JTextField potenssiinAText;
    private javax.swing.JButton potenssiinBButton;
    private javax.swing.JTextField potenssiinBText;
    private javax.swing.JButton potenssiinCButton;
    private javax.swing.JTextField potenssiinCText;
    private javax.swing.JLabel rivitALabel;
    private javax.swing.JTextField rivitAText;
    private javax.swing.JLabel rivitBLabel;
    private javax.swing.JTextField rivitBText;
    private javax.swing.JLabel rivitCLabel;
    private javax.swing.JTextField rivitCText;
    private javax.swing.JLabel sarakkeetALabel;
    private javax.swing.JTextField sarakkeetAText;
    private javax.swing.JLabel sarakkeetBLabel;
    private javax.swing.JTextField sarakkeetBText;
    private javax.swing.JLabel sarakkeetCLabel;
    private javax.swing.JTextField sarakkeetCText;
    private javax.swing.JButton summaaButton;
    private javax.swing.JLabel symmetrinenALabel;
    private javax.swing.JLabel symmetrinenATulosLabel;
    private javax.swing.JLabel symmetrinenBLabel;
    private javax.swing.JLabel symmetrinenBTulosLabel;
    private javax.swing.JLabel symmetrinenCLabel;
    private javax.swing.JLabel symmetrinenCTulosLabel;
    private javax.swing.JButton tallennaCButton;
    private javax.swing.JTextField tallennaCText;
    private javax.swing.JButton tiedotAButton;
    private javax.swing.JButton tiedotBButton;
    private javax.swing.JButton tiedotCButton;
    private javax.swing.JButton transpoosiAButton;
    private javax.swing.JButton transpoosiBButton;
    private javax.swing.JButton transpoosiCButton;
    private javax.swing.JButton vahennaButton;
    private javax.swing.JLabel vastausmatriisiLabel;
    // End of variables declaration//GEN-END:variables
}